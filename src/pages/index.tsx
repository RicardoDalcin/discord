import { useCallback, useRef } from "react";

import { type NextPage } from "next";

import Head from "next/head";
import Link from "next/link";

import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const serverRef = useRef<HTMLInputElement>(null);

  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  const test = trpc.server.getAll.useQuery();

  const createServer = trpc.server.create.useMutation({
    onSuccess: () => {
      test.refetch();
    },
  });

  const handleSubmit = useCallback(
    async (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      await createServer.mutateAsync({
        name: serverRef.current?.value ?? "New server",
      });

      if (serverRef.current) serverRef.current.value = "";
    },
    [createServer]
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            My <span className="text-[hsl(280,100%,70%)]">Discord</span> clone
          </h1>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <form className="flex items-center gap-4" onSubmit={handleSubmit}>
              <input type="text" placeholder="Server name" ref={serverRef} />

              <button type="submit" className="bg-orange-500">
                Create server
              </button>
            </form>
          </div>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <ul className="flex gap-4">
              {test?.data?.map((server) => (
                <li key={server.id}>
                  <Link href={`/server/${server.id}`}>{server.name}</Link>
                </li>
              ))}
            </ul>
          </div>

          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

import { useCallback, useRef } from "react";

import { type NextPage } from "next";

import Head from "next/head";
import Link from "next/link";

import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import Servers from "../components/Servers";

const Home: NextPage = () => {
  const serverRef = useRef<HTMLInputElement>(null);

  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  const test = trpc.server.getAll.useQuery();

  const createServer = trpc.server.create.useMutation({
    onSuccess: () => {
      test.refetch();
    },
  });

  const handleSubmit = useCallback(
    async (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      await createServer.mutateAsync({
        name: serverRef.current?.value ?? "New server",
      });

      if (serverRef.current) serverRef.current.value = "";
    },
    [createServer]
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex max-h-screen min-h-screen overflow-y-auto overflow-x-hidden bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="flex min-h-full w-full items-stretch justify-start">
          <Servers />

          <div className="flex h-full min-w-[256px] max-w-[256px] flex-col justify-between bg-zinc-700">
            {/* <div className="flex flex-col gap-4">
              <div className="flex h-12 w-full items-center border-b-[1px] border-zinc-800 px-6 font-semibold text-white">
                {server?.data?.name}
              </div>

              <div className="flex flex-col gap-4 px-4 py-4">
                <div className="flex items-center">
                  <form className="flex w-full gap-4" onSubmit={handleSubmit}>
                    <input
                      className="h-8 flex-1 rounded-full bg-zinc-600 px-4 text-white "
                      type="text"
                      placeholder="Channel name"
                      ref={channelRef}
                    />

                    <button
                      type="submit"
                      className="flex h-8 w-8 items-center justify-center rounded-full bg-zinc-600 text-white hover:bg-zinc-500"
                    >
                      <Plus />
                    </button>
                  </form>
                </div>

                <div className="flex flex-col gap-2">
                  {server?.data?.channels.map((channel) => (
                    <div
                      key={channel.id}
                      className={classnames(
                        "group flex items-center rounded-xl px-2",
                        {
                          "bg-zinc-600 text-white":
                            activeChannel === channel.id,
                          "text-white hover:bg-zinc-500":
                            activeChannel !== channel.id,
                        }
                      )}
                    >
                      <button
                        onClick={() => handleChangeChannel(channel.id)}
                        className="flex h-full w-full items-center gap-4 py-2"
                      >
                        <span className="text-xl text-zinc-400">
                          <Hash />
                        </span>

                        {channel.name}
                      </button>

                      <button
                        className="flex h-full items-center justify-center gap-4 py-2 text-zinc-400 hover:text-white"
                        onClick={() => {
                          handleDeleteChannel(channel.id);
                        }}
                      >
                        <span className="hidden text-xl group-hover:block">
                          <Trash />
                        </span>
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div> */}

            <div className="flex w-full items-center justify-start gap-2 bg-zinc-800 px-2 py-2">
              {/* <Image
                src={sessionData.user.image as string}
                alt=""
                className="rounded-full"
                height={32}
                width={32}
              />

              <p className="font-semibold text-white">
                {sessionData.user.name}
              </p> */}
            </div>
          </div>

          <div className="flex h-full w-full flex-col bg-zinc-600">
            {/* <div className="flex h-12 items-center border-b-[1px] border-zinc-700 px-4">
              <span className="text-2xl text-zinc-400">
                <Hash />
              </span>

              <p className="ml-2 font-semibold text-white">
                {channel?.data?.name}
              </p>
            </div> */}

            {/* <div
              ref={chatRef}
              className="flex flex-1 flex-col-reverse overflow-x-auto px-4"
            >
              <ul className="flex flex-col gap-4 py-4">
                {channel?.data?.messages.map((message) => (
                  <li key={message.id} className="flex items-center gap-4">
                    <Image
                      className="rounded-full"
                      height={40}
                      width={40}
                      src={message.author.image as string}
                      alt=""
                    />

                    <div className="flex flex-col">
                      <div className="flex gap-2">
                        <p className="font-semibold text-yellow-400">
                          {message.author.name}
                        </p>

                        <p className="text-zinc-400">
                          {formatDistanceToNow(new Date(message.createdAt))}
                        </p>
                      </div>

                      <p className="text-zinc-100">{message.content}</p>
                    </div>
                  </li>
                ))}
              </ul>
            </div> */}

            <div className="px-4 pb-6 pt-2">
              {/* <form
                className="flex items-center gap-4"
                onSubmit={handleSendMessage}
              >
                <input
                  className="h-12 flex-1 rounded-xl bg-zinc-700 px-4 text-white placeholder:text-zinc-400"
                  type="text"
                  placeholder={`Message #${channel?.data?.name}`}
                  ref={messageRef}
                />
              </form> */}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

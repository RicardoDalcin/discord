import { useCallback, useRef, useState } from "react";

import { type NextPage } from "next";

import Head from "next/head";
import Link from "next/link";

import { trpc } from "../../utils/trpc";
import { useRouter } from "next/router";

const Server: NextPage = () => {
  const [activeChannel, setActiveChannel] = useState<string>("");

  const channelRef = useRef<HTMLInputElement>(null);
  const messageRef = useRef<HTMLInputElement>(null);

  const router = useRouter();

  const serverId = router.query.serverId as string;

  const server = trpc.server.show.useQuery({ id: serverId });

  const channel = trpc.server.getChannel.useQuery({ id: activeChannel });

  const createChannel = trpc.server.createChannel.useMutation({
    onSuccess: () => {
      server.refetch();
    },
  });

  const createMessage = trpc.server.createMessage.useMutation({
    onSuccess: () => {
      channel.refetch();
    },
  });

  const handleSubmit = useCallback(
    async (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      await createChannel.mutateAsync({
        name: channelRef.current?.value ?? "New channel",
        serverId,
      });

      if (channelRef.current) channelRef.current.value = "";
    },
    [createChannel, serverId]
  );

  const handleChangeChannel = useCallback((channelId: string) => {
    setActiveChannel(channelId);
  }, []);

  const handleSendMessage = useCallback(
    async (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      await createMessage.mutateAsync({
        content: messageRef.current?.value ?? "New message",
        channelId: activeChannel,
      });

      if (messageRef.current) messageRef.current.value = "";
    },
    [createMessage, activeChannel]
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            My <span className="text-[hsl(280,100%,70%)]">Discord</span> clone
          </h1>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <form className="flex items-center gap-4" onSubmit={handleSubmit}>
              <input type="text" placeholder="Server name" ref={channelRef} />

              <button type="submit" className="bg-orange-500">
                Create channel
              </button>
            </form>
          </div>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <ul className="flex gap-4">
              {server?.data?.channels.map((channel) => (
                <li
                  key={channel.id}
                  className={
                    activeChannel === channel.id
                      ? "text-orange-500"
                      : "text-white"
                  }
                >
                  <button onClick={() => handleChangeChannel(channel.id)}>
                    {channel.name}
                  </button>
                </li>
              ))}
            </ul>
          </div>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <ul className="flex gap-4">
              {channel?.data?.messages.map((message) => (
                <li key={message.id} className="text-white">
                  {message.content}
                </li>
              ))}
            </ul>

            {activeChannel && (
              <div className="flex gap-4">
                <form
                  className="flex items-center gap-4"
                  onSubmit={handleSendMessage}
                >
                  <input type="text" placeholder="Message" ref={messageRef} />

                  <button type="submit" className="bg-orange-500">
                    Send
                  </button>
                </form>
              </div>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Server;
